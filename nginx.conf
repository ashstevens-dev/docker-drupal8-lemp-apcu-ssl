    # disable directory listing
    autoindex off;

    # hide the nginx version.
    server_tokens off;

    # hide the PHP version.
    fastcgi_hide_header X-Powered-By;
    proxy_hide_header X-Powered-By;

    # security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header Strict-Transport-Security "max-age=63072000; includeSubdomains; preload";
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;

    # enable gzip compression
    gzip on;
    gzip_disable "msie6";
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript image/svg+xml;
    # Specify the minimum length of the response to compress (default 20)
    gzip_min_length 500;


    server {
        listen 80;
     
        root /var/www/html;
        index index.php index.html index.htm;
     
        access_log /var/log/nginx/access.log;
        error_log /var/log/nginx/error.log;

    	# allow larger file uploads
    	client_max_body_size 64M;

        # don't log these files
        location = /favicon.ico {
            log_not_found off;
            access_log off;
        }
        location = /robots.txt {
            log_not_found off;
            access_log off;
            allow all;
        }
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
            try_files $uri @rewrite;
            expires max;
            log_not_found off;
        }

        # fix image styles bug
        location ~ ^/sites/.*/files/styles/ {
            try_files $uri @rewrite;
        }

        # svg encoding
        location ~* \.svgz {
          gzip off;
          add_header Content-Encoding "gzip";
        }

        # disallow direct access to PHP files
        location ~ \..*/.*\.php$ {
            return 403;
        }

        # disallow unauthorized access
        location ~ ^/sites/.*/private/ {
            return 403;
        }
        # handle private files through Drupal
        location ~ ^(/[a-z\-]+)?/system/files/ { # For Drupal >= 7
            try_files $uri /index.php?$args;
        }

        # block access to scripts in site files directory
        location ~ ^/sites/[^/]+/files/.*\.php$ {
            deny all;
        }

        # Allow "Well-Known URIs" as per RFC 5785
        location ~* ^/.well-known/ {
            allow all;
        }

        # block access to dotfiles
        location ~ (^|/)\. {
            return 403;
        }

        # needed for Drupal routing    
        location / {
            try_files $uri $uri/ /index.php$is_args$args;
        }
        location @rewrite {
            rewrite ^ /index.php;
        }

        # if this matches a request URI, the URI is changed as specified in the replacement string
        rewrite ^/core/authorize.php/core/authorize.php(.*)$ /core/authorize.php$1;

        # Don't allow direct access to PHP files in the vendor directory.
        location ~ /vendor/.*\.php$ {
            deny all;
            return 404;
        }

        # Protect sensitive files and directories from prying eyes.
        location ~* \.(engine|inc|install|make|module|profile|po|sh|.*sql|theme|twig|tpl(\.php)?|xtmpl|yml)(~|\.sw[op]|\.bak|\.orig|\.save)?$|composer\.(lock|json)$|web\.config$|^(\.(?!well-known).*|Entries.*|Repository|Root|Tag|Template)$|^#.*#$|\.php(~|\.sw[op]|\.bak|\.orig|\.save)$ {
            deny all;
            return 404;
        }

        # nginx doesn't have built-in PHP processing; it needs to use PHP-FPM
        location ~ '\.php$|^/update.php' {
            # test for the existence of the file in the local file system
            try_files $uri =404;
            # FastCGI Proxying for handling the PHP processing with PHP-FPM
            fastcgi_split_path_info ^(.+?\.php)(|/.*)$;
            fastcgi_pass php:9000;
            fastcgi_index index.php;
            include fastcgi_params;
            fastcgi_param HTTP_PROXY "";
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
            fastcgi_param PATH_INFO $fastcgi_path_info;
            fastcgi_param QUERY_STRING $args;
            fastcgi_intercept_errors on;
        }

        # Handle private files through Drupal. Private file's path can come
        # with a language prefix.
        location ~ ^(/[a-z\-]+)?/system/files/ { # For Drupal >= 7
            try_files $uri /index.php?$query_string;
        }

        # Enforce clean URLs
        # Removes index.php from urls like www.example.com/index.php/my-page --> www.example.com/my-page
        # Could be done with 301 for permanent or other redirect codes.
        if ($request_uri ~* "^(.*/)index\.php/(.*)") {
            return 307 $1$2;
        }

        # protect the login by whitelisting IPs
        #location ~ ^/(user) {
        #    allow XXX.XX.X.X;
        #    deny all;
        #}

        # block nginx help log
        location ~* /wp-content/uploads/nginx-helper/ {
            deny all;
        }

        # disallow other CGI scripts
        location ~* .(pl|cgi|py|sh|lua)$ {
            return 444;
        }

        # prevent image hotlinking
        location ~ .(gif|png|jpe?g)$ {
            # if you're using a custom url, replace localhost with it
            valid_referers none blocked localhost *.localhost;
            if ($invalid_referer) {
                return 403;
            }
        }

        # limit request types to only GET/HEAD/POST
        if ($request_method !~ ^(GET|HEAD|POST)$ ) {
            return 444;
        }

        # block unwanted user-agents/bots
        if ($http_user_agent ~   
        (msnbot|Purebot|Baiduspider|Lipperhey|Mail.Ru|scrapbotBaiduspider|Yandex|DirBuster|libwww|"")) {
            return 403;
        }

    }